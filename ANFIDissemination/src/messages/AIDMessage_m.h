//
// Generated file, do not edit! Created by nedtool 4.6 from messages/AIDMessage.msg.
//

#ifndef _AIDMESSAGE_M_H_
#define _AIDMESSAGE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include <list>
	#include "WaveShortMessage_m.h"
// }}

/**
 * Class generated from <tt>messages/AIDMessage.msg:24</tt> by nedtool.
 * <pre>
 * message AIDMessage extends WaveShortMessage
 * {
 *     unsigned int srcAddr;
 *     unsigned int destAddr;
 *     unsigned int msgId;
 *     int ttl;
 *     double messageROI;
 *     simtime_t messageOriginTime;
 *     simtime_t messageTTL;
 *     int hops;
 *     simtime_t sent;
 * }
 * </pre>
 */
class AIDMessage : public ::WaveShortMessage
{
  protected:
    unsigned int srcAddr_var;
    unsigned int destAddr_var;
    unsigned int msgId_var;
    int ttl_var;
    double messageROI_var;
    simtime_t messageOriginTime_var;
    simtime_t messageTTL_var;
    int hops_var;
    simtime_t sent_var;

  private:
    void copy(const AIDMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AIDMessage&);

  public:
    AIDMessage(const char *name=NULL, int kind=0);
    AIDMessage(const AIDMessage& other);
    virtual ~AIDMessage();
    AIDMessage& operator=(const AIDMessage& other);
    virtual AIDMessage *dup() const {return new AIDMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getSrcAddr() const;
    virtual void setSrcAddr(unsigned int srcAddr);
    virtual unsigned int getDestAddr() const;
    virtual void setDestAddr(unsigned int destAddr);
    virtual unsigned int getMsgId() const;
    virtual void setMsgId(unsigned int msgId);
    virtual int getTtl() const;
    virtual void setTtl(int ttl);
    virtual double getMessageROI() const;
    virtual void setMessageROI(double messageROI);
    virtual simtime_t getMessageOriginTime() const;
    virtual void setMessageOriginTime(simtime_t messageOriginTime);
    virtual simtime_t getMessageTTL() const;
    virtual void setMessageTTL(simtime_t messageTTL);
    virtual int getHops() const;
    virtual void setHops(int hops);
    virtual simtime_t getSent() const;
    virtual void setSent(simtime_t sent);
};

inline void doPacking(cCommBuffer *b, AIDMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, AIDMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef _AIDMESSAGE_M_H_

